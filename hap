#include <bits/stdc++.h>
using namespace std;
#define FAST std::ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define PI 3.14159265358979323844
#define mp make_pair
#define pb push_back
#define fi first 
#define se second
#define int long long ////////////
#define MOD 1000000007    ////////
#define ALL(v) v.begin(), v.end()
#define SORT(v) sort(ALL(v))  
#define REVERSE(v) reverse(ALL(v))
#define maxc(v) max_element(all(v))
#define minc(v) min_element(all(v))
#define fr first
#define sc second
#define ppb pop_back
#define GCD(m,n) __gcd(m,n)
#define LCM(m,n) (m*n)/GCD(m,n)
#define inputarr(a,n) for(int i=0;i<n;++i) cin>>a[i]
#define initarr(a,n,x) for (int i=0;i<n;++i) a[i]=x
#define rep(i,a,n)  for(int i=a ; i<n ; i++)
#define repe(i,a,n) for(int i=a;i<=n;i++)
#define rev(i,a,b) for(int i=a;i>=b;i--)
//define ll long long
#define ld long double 
 
#define pii std::pair<int, int> 
#define pll std::pair<ll, ll>  
#define mii map<int,int>
#define mci map<char,int>
#define msi map<string,int>
 
#define vi vector<int>  
#define vvi vector<vi > 
#define vii vector<pii >

#define itv for(auto it= v.begin(); it != v.end(); ++it )

#define present(container, element) (container.find(element) != container.end())
#define cpresent(container, element) (find(ALL(container),element) != container.end())
//#define invect(data,n,commands) for(int i = 0;i<n;i++){int tmp;cin>>tmp;data.pb(tmp);commands}
//#define inset(data,n,commands) for(int i = 0;i<n;i++){int tmp;cin>>tmp;data.insert(tmp);commands}
//#define trav(a, x) for(auto& a : x)
//#define display(x) trav(a,x) cout<<a<<" ";cout<<endl
 
#define U 998244353
 
#define bs binary_search
 
 
#define  lb(v,val) = lower_bound(ALL(v), val); 
 
#define dbg1(a) cout<<" *"<<a<<" ";
#define dbg2(a,b) cout<<" *"<<a<<" **"<<b<<" "     /////
#define dbg cout<<"hi"
#define nl endl
#define  sz(s) s.size()

int fast_pow(int base, int n,int M) 
{
    if(n==0)
       return 1;
    if(n==1)
    return base;
    int halfn=fast_pow(base,n/2,M);
    if(n%2==0)
        return ( halfn * halfn ) % M;
    else
        return ( ( ( halfn * halfn ) % M ) * base ) % M;
}


void quickly_quickly_kro()
{

int n,k; cin>>n>>k;

vi v(n);
rep(i,0,n)
cin>>v[i];



vi v1(n),v2(n);

rep(i,0,n)
v1[i]=v[i];

rep(i,0,n)
{
  v1[i]=((v1[i])^(v1[n-1-i]));
}

if(k<=n)
{
  rep(i,0,k)
  {
      v[i]=((v[i])^(v[n-1-i]));
  }
  rep(i,0,n)
  cout<<v[i]<<" ";
}



cout<<nl;

}
 
signed main()
{
    #ifndef ONLINE_JUDGE
    // for getting input from input.txt
    freopen("input.txt", "r", stdin);
    // for writing output to output.txt
    //this can be opted out if you want to print the output to the sublime console
    freopen("output.txt", "w", stdout);
#endif
 
 
 
 
   FAST
   //generatePrimeFactors();
   int t; 
      t=1;              
     cin>>t;
      
    while(t--)
    {
 
      quickly_quickly_kro();
      
}

 
 #ifndef ONLINE_JUDGE
  cerr<<(1000*clock())/CLOCKS_PER_SEC<<"ms";
 #endif  

 
 
 
        
 
   return 0;
}
